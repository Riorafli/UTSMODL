# -*- coding: utf-8 -*-
"""UTSMP_RioRafliAdinanta_2702305714_inference1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l8YTZKdOKaD2uqGn15JlP2VfqFdqQaxZ
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle as pk
import datetime
import time

st.set_page_config(page_title="Booking Status Insight", layout="centered")

def load_pickle_file(path):
    with open(path, 'rb') as file:
        return pk.load(file)

def normalize_inputs(df, columns):
    scaler_tool = load_pickle_file("scaler.pkl")
    scaled_result = scaler_tool.transform(df[columns])
    return pd.DataFrame(scaled_result, columns=columns)

def transform_categoricals(df, cols):
    transformer = load_pickle_file("encoder.pkl")
    transformed_data = transformer.transform(df[cols])

    col_names = []
    for method, trans, fields in transformer.named_steps['preprocessor'].transformers_:
        if method == 'ordinal':
            col_names.extend(fields)
        elif method == 'onehot':
            col_names.extend(trans.get_feature_names_out(fields))
    return pd.DataFrame(transformed_data, columns=col_names), col_names

def prepare_for_model(input_data):
    numeric_fields = [
        'adults', 'children', 'weekend_stays', 'weekday_stays',
        'lead_days', 'past_cancels', 'past_not_canceled',
        'room_price_avg', 'special_requests'
    ]

    categorical_fields = [col for col in input_data.columns if col not in numeric_fields and col not in ['booking_status', 'Booking_ID']]
    ord_enc_fields = ['arrival_month', 'arrival_day']
    onehot_enc_fields = [col for col in categorical_fields if col not in ord_enc_fields]

    scaled_df = normalize_inputs(input_data.copy(), numeric_fields)
    encoded_df, encoded_names = transform_categoricals(input_data.copy(), categorical_fields)

    full_prepared = pd.concat([encoded_df, scaled_df], axis=1)[encoded_names + numeric_fields]
    return full_prepared

def run_prediction(input_df):
    classifier = load_pickle_file("xgb_model.pkl")
    class_dict = load_pickle_file("target_vals.pkl")
    reverse_map = {v: k for k, v in class_dict.items()}

    processed_input = prepare_for_model(input_df)
    prediction = classifier.predict(processed_input)[0]
    prediction_probs = classifier.predict_proba(processed_input)

    st.subheader("üîç Prediction Breakdown")
    st.dataframe(pd.DataFrame(prediction_probs, columns=reverse_map.values()))

    if prediction == 0:
        st.success(f"Prediction: **{reverse_map[prediction]}**")
    else:
        st.error(f"Prediction: **{reverse_map[prediction]}**")

def booking_app():
    st.markdown("<h1 style='text-align:center;'>üè® Booking Status Predictor</h1>", unsafe_allow_html=True)
    st.markdown("#### By: Rio Rafli Adinanta (2702305714)")
    st.markdown("Predict hotel booking cancellations based on visitor data.")

    with st.expander("üìÇ View Dataset Preview"):
        df_raw = pd.read_csv("Dataset_B_hotel.csv").dropna()
        st.dataframe(df_raw.head())

    st.markdown("### üìã Guest & Booking Information")

    today = datetime.date.today()
    booking_made = st.date_input("Booking Date", value=today)
    scheduled_arrival = st.date_input("Expected Arrival Date", value=today + datetime.timedelta(days=30))

    lead_days = (scheduled_arrival - booking_made).days
    length_of_stay = st.number_input("Length of Stay (days)", min_value=1, value=1)

    num_adults = st.number_input("Number of Adults", min_value=0, value=1)
    num_kids = st.number_input("Number of Children", min_value=0, value=0)

    weekdays = weekends = 0
    for i in range(length_of_stay):
      temp_day = scheduled_arrival + datetime.timedelta(days=i)
      if temp_day.weekday() >= 5:
        weekends += 1
    else:
        weekdays += 1

    with st.container():
        a1, a2 = st.columns(2)
        meal_pref = a1.selectbox("Meal Option", sorted(df_raw['type_of_meal_plan'].unique()))
        room_choice = a2.selectbox("Preferred Room", sorted(df_raw['room_type_reserved'].unique()))

        market_group = a1.selectbox("Market Type", sorted(df_raw['market_segment_type'].unique()))
        needs_parking = a2.selectbox("Needs Parking?", ['Yes', 'No'])
        returning_guest = a1.selectbox("Returning Guest?", ['Yes', 'No'])

        past_cancel = a2.number_input("Past Cancellations", min_value=0, value=0)
        past_bookings = a1.number_input("Past Non-Cancelled Bookings", min_value=0, value=0)

        avg_price = a2.number_input(
            "Avg Room Price",
            value=float(df_raw.groupby("room_type_reserved")["avg_price_per_room"].mean()[room_choice])
        )

        requests_made = a1.number_input("Special Requests", min_value=0, value=0)

    parking_flag = 1 if needs_parking == 'Yes' else 0
    guest_flag = 1 if returning_guest == 'Yes' else 0

    final_input = pd.DataFrame([{
        'adults': num_adults,
        'children': num_kids,
        'weekend_stays': weekends,
        'weekday_stays': weekdays,
        'type_of_meal_plan': meal_pref,
        'required_car_parking_space': parking_flag,
        'room_type_reserved': room_choice,
        'lead_days': lead_days,
        'arrival_year': scheduled_arrival.year,
        'arrival_month': scheduled_arrival.month,
        'arrival_day': scheduled_arrival.day,
        'market_segment_type': market_group,
        'repeated_guest': guest_flag,
        'past_cancels': past_cancel,
        'past_not_canceled': past_bookings,
        'room_price_avg': avg_price,
        'special_requests': requests_made
    }])

    if st.button("üîÆ Run Prediction"):
        with st.spinner("Analyzing data..."):
            time.sleep(0.6)
            run_prediction(final_input)

if __name__ == "__main__":
    booking_app()