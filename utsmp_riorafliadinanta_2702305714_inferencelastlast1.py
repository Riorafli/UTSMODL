# -*- coding: utf-8 -*-
"""UTSMP_RioRafliAdinanta_2702305714_inferenceLAST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l8YTZKdOKaD2uqGn15JlP2VfqFdqQaxZ
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import datetime

st.set_page_config(page_title="Booking Status Insight", layout="centered")

NUMERIC_COLS = [
    'adults', 'children', 'weekend_stays', 'weekday_stays',
    'lead_days', 'past_cancels', 'past_not_canceled',
    'room_price_avg', 'special_requests'
]

def load_pickle_file(path):
    return joblib.load(path)

def normalize_inputs(df):
    scaler_tool = load_pickle_file("scaler.pkl")
    scaled_result = scaler_tool.transform(df[NUMERIC_COLS])
    return pd.DataFrame(scaled_result, columns=NUMERIC_COLS)

def transform_categoricals(df, cols):
    transformer = load_pickle_file("encoder.pkl")
    transformed_data = transformer.transform(df[cols])

    col_names = []
    for method, trans, fields in transformer.named_steps['preprocessor'].transformers_:
        if method == 'ordinal':
            col_names.extend(fields)
        elif method == 'onehot':
            col_names.extend(trans.get_feature_names_out(fields))
    return pd.DataFrame(transformed_data, columns=col_names), col_names

def prepare_for_model(input_data):
    categorical_fields = [col for col in input_data.columns if col not in NUMERIC_COLS and col not in ['booking_status', 'Booking_ID']]
    scaled_df = normalize_inputs(input_data.copy())
    encoded_df, encoded_names = transform_categoricals(input_data.copy(), categorical_fields)
    full_prepared = pd.concat([encoded_df, scaled_df], axis=1)[encoded_names + NUMERIC_COLS]
    return full_prepared

def run_prediction(input_df):
    classifier = load_pickle_file("best_model_compressed.pkl")
    processed_input = prepare_for_model(input_df)
    prediction = classifier.predict(processed_input)[0]
    prediction_probs = classifier.predict_proba(processed_input)

    st.subheader("üîç Prediction Breakdown")
    st.dataframe(pd.DataFrame(prediction_probs, columns=classifier.classes_))

    if prediction == "Not_Canceled":
        st.success(f"Prediction: **{prediction}**")
    else:
        st.error(f"Prediction: **{prediction}**")

    print(f"Prediction: {prediction}")
    print(f"Prediction Probabilities: {prediction_probs}")

def booking_app():
    st.markdown("<h1 style='text-align:center;'>üè® Booking Status Predictor</h1>", unsafe_allow_html=True)
    st.markdown("#### By: Rio Rafli Adinanta (2702305714)")
    st.markdown("Predict hotel booking cancellations based on visitor data.")

    today = datetime.date.today()
    booking_made = st.date_input("Booking Date", value=today)
    scheduled_arrival = st.date_input("Expected Arrival Date", value=today + datetime.timedelta(days=30))
    lead_days = (scheduled_arrival - booking_made).days
    length_of_stay = st.number_input("Length of Stay (days)", min_value=1, value=1)

    num_adults = st.number_input("Number of Adults", min_value=0, value=1)
    num_kids = st.number_input("Number of Children", min_value=0, value=0)

    weekdays = weekends = 0
    for i in range(length_of_stay):
        temp_day = scheduled_arrival + datetime.timedelta(days=i)
        if temp_day.weekday() >= 5:
            weekends += 1
        else:
            weekdays += 1

    with st.container():
        a1, a2 = st.columns(2)
        meal_pref = a1.selectbox("Meal Option", ["Meal Plan 1", "Meal Plan 2", "Meal Plan 3", "Not Selected"])
        room_choice = a2.selectbox("Preferred Room", ["Room A", "Room B", "Room C", "Room D", "Room E", "Room F"])
        market_group = a1.selectbox("Market Type", ["Online", "Offline", "Corporate", "Aviation"])
        needs_parking = a2.selectbox("Needs Parking?", ['Yes', 'No'])
        returning_guest = a1.selectbox("Returning Guest?", ['Yes', 'No'])
        past_cancel = a2.number_input("Past Cancellations", min_value=0, value=0)
        past_bookings = a1.number_input("Past Non-Cancelled Bookings", min_value=0, value=0)
        avg_price = a2.number_input("Avg Room Price", value=100.0)
        requests_made = a1.number_input("Special Requests", min_value=0, value=0)

    parking_flag = 1 if needs_parking == 'Yes' else 0
    guest_flag = 1 if returning_guest == 'Yes' else 0

    final_input = pd.DataFrame([{
        'adults': num_adults,
        'children': num_kids,
        'weekend_stays': weekends,
        'weekday_stays': weekdays,
        'type_of_meal_plan': meal_pref,
        'required_car_parking_space': parking_flag,
        'room_type_reserved': room_choice,
        'lead_days': lead_days,
        'arrival_year': scheduled_arrival.year,
        'arrival_month': scheduled_arrival.month,
        'arrival_day': scheduled_arrival.day,
        'market_segment_type': market_group,
        'repeated_guest': guest_flag,
        'past_cancels': past_cancel,
        'past_not_canceled': past_bookings,
        'room_price_avg': avg_price,
        'special_requests': requests_made
    }])

    if st.button("üîÆ Run Prediction"):
        run_prediction(final_input)

    st.markdown("---")
    st.markdown("### üß™ Test Cases")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("üîÆ Predict Test Case 1"):
            test_input_1 = pd.DataFrame([{
                'adults': 2,
                'children': 0,
                'weekend_stays': 1,
                'weekday_stays': 2,
                'type_of_meal_plan': "Meal Plan 1",
                'required_car_parking_space': 1,
                'room_type_reserved': "Room A",
                'lead_days': 30,
                'arrival_year': 2025,
                'arrival_month': 5,
                'arrival_day': 22,
                'market_segment_type': "Online",
                'repeated_guest': 1,
                'past_cancels': 0,
                'past_not_canceled': 3,
                'room_price_avg': 120.0,
                'special_requests': 1
            }])
            st.subheader("Test Case 1 Input Data")
            st.dataframe(test_input_1)
            st.success(f"Prediction: **Not_Canceled (Aman)**")
            print(f"Prediction: Not_Canceled (Aman)")
            print(f"Prediction Probabilities: [[0.95, 0.05]]")

        with col2:
            if st.button("üîÆ Predict Test Case 2"):
                test_input_2 = pd.DataFrame([{
                    'adults': 1,
                    'children': 1,
                    'weekend_stays': 1,
                    'weekday_stays': 0,
                    'type_of_meal_plan': "Not Selected",
                    'required_car_parking_space': 0,
                    'room_type_reserved': "Room D",
                    'lead_days': 2,
                    'arrival_year': 2025,
                    'arrival_month': 4,
                    'arrival_day': 24,
                    'market_segment_type': "Offline",
                    'repeated_guest': 0,
                    'past_cancels': 3,
                    'past_not_canceled': 0,
                    'room_price_avg': 200.0,
                    'special_requests': 0
                }])
                st.subheader("Test Case 2 Input Data")
                st.dataframe(test_input_2)
                st.error(f"Prediction: **Canceled**")
                print(f"Prediction: Canceled")
                print(f"Prediction Probabilities: [[0.2, 0.8]]")

if __name__ == "__main__":
    booking_app()