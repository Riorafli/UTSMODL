# -*- coding: utf-8 -*-
"""UTSMP_RioRafliAdinanta_2702305714_inference1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l8YTZKdOKaD2uqGn15JlP2VfqFdqQaxZ
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder, StandardScaler
import joblib

import streamlit as st
import pandas as pd
import pickle
from sklearn.preprocessing import LabelEncoder, StandardScaler


st.set_page_config(page_title="Hotel Booking Prediction", layout="centered")

st.markdown("""
    <style>
    .main {background-color: #f8f9fa;}
    .block-container {
        padding-top: 2rem;
        padding-bottom: 2rem;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
    }
    .stFileUploader {
        border: 1px solid #ccc;
        padding: 10px;
    }
    </style>
""", unsafe_allow_html=True)

@st.cache_resource
def load_model():
    return joblib.load("best_model_compressed.pkl")

@st.cache_resource
def load_preprocessors():
    with open("encoders.pkl", "rb") as f:
        label_encoders = pickle.load(f)
    with open("scaler.pkl", "rb") as f:
        scaler = pickle.load(f)
    return label_encoders, scaler

model = load_model()
label_encoders, scaler = load_preprocessors()

def preprocess_input(df):
    df_copy = df.copy()
    for col in df_copy.select_dtypes(include='object').columns:
        if col in label_encoders:
            df_copy[col] = label_encoders[col].transform(df_copy[col])
    df_scaled = scaler.transform(df_copy)
    return df_scaled


st.sidebar.title("üìä Hotel Booking Prediction")
st.sidebar.info("Upload your dataset to predict the booking status.")

st.title("üõéÔ∏è Predict Hotel Booking Status")

uploaded_file = st.file_uploader("Upload a CSV file", type=["csv"])

if uploaded_file:
    input_df = pd.read_csv(uploaded_file)
    st.subheader("üìÑ Uploaded Data Preview")
    st.dataframe(input_df.head(), use_container_width=True)

    if st.button("Predict Booking Status"):
        try:
            processed_input = preprocess_input(input_df)
            predictions = model.predict(processed_input)
            input_df["Prediction"] = predictions
            st.success("‚úÖ Prediction complete!")

            st.subheader("üîÆ Prediction Results")
            st.dataframe(input_df, use_container_width=True)
        except Exception as e:
            st.error(f"‚ùå Prediction failed: {e}")
else:
    st.warning("Please upload a file to continue.")