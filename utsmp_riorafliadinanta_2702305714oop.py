# -*- coding: utf-8 -*-
"""UTSMP_RioRafliAdinanta_2702305714OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fVYWzuFMUnFYx965DLuN4lQKj1rNsJqx
"""

import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report

class HotelBookingModel:
    def __init__(self, data_path):
        self.data_path = data_path
        self.df = None
        self.label_encoders = {}
        self.scaler = StandardScaler()
        self.model = None

    def load_data(self):
        self.df = pd.read_csv(self.data_path)
        self.df.drop('Booking_ID', axis=1, inplace=True)
        self.df.fillna(method='ffill', inplace=True)

    def preprocess(self):
        for col in self.df.select_dtypes(include=['object']).columns:
            le = LabelEncoder()
            self.df[col] = le.fit_transform(self.df[col])
            self.label_encoders[col] = le

        X = self.df.drop("booking_status", axis=1)
        y = self.df["booking_status"]
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42)

        X_train = self.scaler.fit_transform(X_train)
        X_test = self.scaler.transform(X_test)

        return X_train, X_test, y_train, y_test

    def train_models(self, X_train, X_test, y_train, y_test):
        rf_model = RandomForestClassifier(random_state=42)
        rf_model.fit(X_train, y_train)
        rf_preds = rf_model.predict(X_test)
        rf_acc = accuracy_score(y_test, rf_preds)

        xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
        xgb_model.fit(X_train, y_train)
        xgb_preds = xgb_model.predict(X_test)
        xgb_acc = accuracy_score(y_test, xgb_preds)

        print("Random Forest Accuracy:", rf_acc)
        print(classification_report(y_test, rf_preds))
        print("XGBoost Accuracy:", xgb_acc)
        print(classification_report(y_test, xgb_preds))

        self.model = rf_model if rf_acc > xgb_acc else xgb_model

    def save_model(self, output_path='best_model.pkl'):
        with open(output_path, 'wb') as f:
            pickle.dump(self.model, f)

if __name__ == "__main__":
    model = HotelBookingModel("Dataset_B_hotel.csv")
    model.load_data()
    X_train, X_test, y_train, y_test = model.preprocess()
    model.train_models(X_train, X_test, y_train, y_test)
    model.save_model()