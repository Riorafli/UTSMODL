# -*- coding: utf-8 -*-
"""UTSMP_RioRafliAdinanta_2702305714_inference1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l8YTZKdOKaD2uqGn15JlP2VfqFdqQaxZ
"""

import streamlit as st
import pandas as pd
import pickle
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report
import io

label_encoders = {}
scaler = StandardScaler()

def preprocess(df):
    global label_encoders, scaler
    df = df.copy()
    df.drop('Booking_ID', axis=1, inplace=True)
    df.fillna(method='ffill', inplace=True)

    for col in df.select_dtypes(include=['object']).columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le

    X = df.drop("booking_status", axis=1)
    y = df["booking_status"]
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42)

    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)
    return X_train, X_test, y_train, y_test

def train_models(X_train, X_test, y_train, y_test):
    rf_model = RandomForestClassifier(random_state=42)
    rf_model.fit(X_train, y_train)
    rf_preds = rf_model.predict(X_test)
    rf_acc = accuracy_score(y_test, rf_preds)
    rf_report = classification_report(y_test, rf_preds)

    xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)
    xgb_model.fit(X_train, y_train)
    xgb_preds = xgb_model.predict(X_test)
    xgb_acc = accuracy_score(y_test, xgb_preds)
    xgb_report = classification_report(y_test, xgb_preds)

    best_model = rf_model if rf_acc > xgb_acc else xgb_model
    best_acc = rf_acc if rf_acc > xgb_acc else xgb_acc
    best_report = rf_report if rf_acc > xgb_acc else xgb_report

    return best_model, rf_acc, rf_report, xgb_acc, xgb_report, best_acc, best_report

def predict_single_input(model, input_df):
    input_encoded = input_df.copy()
    for col in input_encoded.select_dtypes(include='object').columns:
        if col in label_encoders:
            input_encoded[col] = label_encoders[col].transform(input_encoded[col])
    input_scaled = scaler.transform(input_encoded)
    prediction = model.predict(input_scaled)
    return prediction

def main():
    st.title("Hotel Booking Prediction Model Trainer")
    uploaded_file = st.file_uploader("/content/Dataset_B_hotel.csv", type=["csv"])

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("### Preview of Dataset", df.head())

        if st.button("Train Model"):
            with st.spinner("Training in progress..."):
                try:
                    X_train, X_test, y_train, y_test = preprocess(df)
                    best_model, rf_acc, rf_report, xgb_acc, xgb_report, best_acc, best_report = train_models(
                        X_train, X_test, y_train, y_test)

                    st.success("Training Completed!")

                    st.write(f"### Random Forest Accuracy: {rf_acc:.4f}")
                    st.text("Classification Report:\n" + rf_report)

                    st.write(f"### XGBoost Accuracy: {xgb_acc:.4f}")
                    st.text("Classification Report:\n" + xgb_report)

                    st.write("### Best Model Selected Accuracy:", best_acc)
                    st.text("Classification Report:\n" + best_report)

                    model_bytes = pickle.dumps(best_model)
                    st.download_button(label="Download Best Model",
                                       data=model_bytes,
                                       file_name="best_model.pkl",
                                       mime="application/octet-stream")

                    st.write("### Predict New Data")
                    example_input = df.drop(columns=['booking_status']).iloc[0:1]
                    user_input = st.data_editor(example_input, num_rows="dynamic")

                    if st.button("Predict"):
                        try:
                            pred = predict_single_input(best_model, user_input)
                            st.write("### Predicted Booking Status:", pred[0])
                        except Exception as e:
                            st.error(f"Prediction failed: {e}")

                except Exception as e:
                    st.error(f"An error occurred: {e}")

if __name__ == '__main__':
    main()